#pragma once

////////////////////////////////////////////////////////////////////////////////////////////////////

#include <libutl/Object.h>

////////////////////////////////////////////////////////////////////////////////////////////////////

UTL_NS_BEGIN;

////////////////////////////////////////////////////////////////////////////////////////////////////
// Factory /////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

/**
   Object creation abstraction.

   \author Adam McKee
   \ingroup abstract
*/

////////////////////////////////////////////////////////////////////////////////////////////////////

class Factory : public Object
{
    UTL_CLASS_DECL_ABC(Factory, Object);
    UTL_CLASS_DEFID;

public:
    /**
       Make a new object.
       \return newly created object
       \param arg (optional) information about the object to be created
    */
    virtual Object* make(const Object* arg = nullptr) const = 0;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
// TFactory ////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

/**
   Template version of Factory.

   \author Adam McKee
   \ingroup abstract
*/

////////////////////////////////////////////////////////////////////////////////////////////////////

template <class T> class TFactory : public Factory
{
    UTL_CLASS_DECL_TPL(TFactory, T, Factory);
    UTL_CLASS_DEFID;

public:
    /**
       Make a new object.  The default implementation creates a new instance of class T.
       \return newly created object
       \param arg (optional) information about the object to be created
    */
    virtual Object*
    make(const Object* arg = nullptr) const
    {
        ASSERTD(arg == nullptr);
        return new T();
    }

    /**
       Make a new object.  This method is the same as make(), except that it returns a (T*) instead
       of an (Object*), thus reducing the need for down-casting.
       \return newly created object
       \param arg (optional) information about the object to be created
    */
    T*
    makeT(const Object* arg = nullptr) const
    {
        return utl::cast<T>(make(arg));
    }
};

////////////////////////////////////////////////////////////////////////////////////////////////////

UTL_NS_END;

////////////////////////////////////////////////////////////////////////////////////////////////////

UTL_CLASS_IMPL_TPL(utl::TFactory, T);
