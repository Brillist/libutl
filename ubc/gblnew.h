#pragma once

///////////////////////////////////////////////////////////////////////////////////////////////////

/**
   \file gblnew.h

   Overloaded new/delete operators.

   In \c DEBUG mode, the overloaded new and delete operators do extra checking to help identify
   common memory allocation mistakes for you (such as memory leaks).  To have memory leaks
   reported, simply call memReportLeaks() just before your program exits.

   \author Adam McKee
*/

///////////////////////////////////////////////////////////////////////////////////////////////////

UTL_NS_BEGIN;

///////////////////////////////////////////////////////////////////////////////////////////////////

class Thread;

///////////////////////////////////////////////////////////////////////////////////////////////////

#if (UTL_GBLNEW_MODE == UTL_GBLNEW_MODE_DEBUG) || (UTL_GBLNEW_MODE == UTL_GBLNEW_MODE_DEBUG_MSVC)

///////////////////////////////////////////////////////////////////////////////////////////////////

/**
   Report memory leaks.
*/
void memReportLeaks();

///////////////////////////////////////////////////////////////////////////////////////////////////

#endif

///////////////////////////////////////////////////////////////////////////////////////////////////

#if UTL_GBLNEW_MODE == UTL_GBLNEW_MODE_DEBUG

///////////////////////////////////////////////////////////////////////////////////////////////////

/**
   Report memory leaks.
   \param includeUnknown also report leaks from unknown sources?
*/
void memReportLeaks(bool includeUnknown);

///////////////////////////////////////////////////////////////////////////////////////////////////

void memPrintBlocks();

///////////////////////////////////////////////////////////////////////////////////////////////////

#endif // UTL_GBLNEW_MODE

///////////////////////////////////////////////////////////////////////////////////////////////////

UTL_NS_END;

///////////////////////////////////////////////////////////////////////////////////////////////////

#include <new>

///////////////////////////////////////////////////////////////////////////////////////////////////

#if UTL_GBLNEW_MODE == UTL_GBLNEW_MODE_DEBUG

///////////////////////////////////////////////////////////////////////////////////////////////////

/**
   Overloaded operator new[].
   \return address of allocated block
   \param size number of bytes
*/
void* operator new[](size_t size);

///////////////////////////////////////////////////////////////////////////////////////////////////

/**
   Overloaded operator delete[].
   \param ptr address of block to be freed
*/
void operator delete[](void* ptr) noexcept;

///////////////////////////////////////////////////////////////////////////////////////////////////

/**
   Overloaded operator new[].
   \return address of allocated block
   \param size block size in bytes
   \param file name of file where block was allocated
   \param line line number within file where block was allocated
*/
void* operator new[](size_t size, const char* file, uint_t line);

///////////////////////////////////////////////////////////////////////////////////////////////////

/**
   Overloaded operator delete[] (with file and line number info).
   \param ptr block address
   \param file name of file where block was allocated
   \param line line number within file where block was allocated
*/
void operator delete[](void* ptr, const char* file, uint_t line) noexcept;

///////////////////////////////////////////////////////////////////////////////////////////////////

/**
   Overloaded operator new.
   \return address of allocated block
   \param size block size in bytes
*/
void* operator new(size_t size);

///////////////////////////////////////////////////////////////////////////////////////////////////

/**
   Overloaded operator delete.
   \param ptr block address
*/
void operator delete(void* ptr) noexcept;

///////////////////////////////////////////////////////////////////////////////////////////////////

/**
   Overloaded operator new (with file and line number info).
   \return address of allocated block
   \param size block size in bytes
   \param file name of file where block was allocated
   \param line line number within file where block was allocated
*/
void* operator new(size_t size, const char* file, uint_t line);

///////////////////////////////////////////////////////////////////////////////////////////////////

/**
   Overloaded operator delete (with file and line number info).
   \param ptr block address
   \param file name of file where block was allocated
   \param line line number within file where block was allocated
*/
void operator delete(void* ptr, const char* file, uint_t line) noexcept;

///////////////////////////////////////////////////////////////////////////////////////////////////

#endif // UTL_GBLNEW_MODE == UTL_GBLNEW_MODE_DEBUG

///////////////////////////////////////////////////////////////////////////////////////////////////

#include <libutl/gblnew_macros.h>
