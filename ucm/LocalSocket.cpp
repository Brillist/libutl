#include <libutl/libutl.h>

////////////////////////////////////////////////////////////////////////////////////////////////////

#if UTL_HOST_TYPE == UTL_HT_UNIX

////////////////////////////////////////////////////////////////////////////////////////////////////

#include <sys/un.h>
#include <libutl/LocalSocket.h>

////////////////////////////////////////////////////////////////////////////////////////////////////

UTL_CLASS_IMPL(utl::LocalSocket);

////////////////////////////////////////////////////////////////////////////////////////////////////

UTL_NS_BEGIN;

////////////////////////////////////////////////////////////////////////////////////////////////////

LocalSocket::LocalSocket(int fd)
{
    setFD(fd);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

LocalSocket::LocalSocket(const String& path)
{
    open(path);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void
LocalSocket::open(const String& path)
{
    int fd;

    // address must make sense
    ASSERTD(!path.empty());

    // close any currently open connection
    if (_fd >= 0)
        close();

    // create a socket
    fd = socket(AF_UNIX, SOCK_STREAM, 0);
    if (fd < 0)
        errToEx(path);

    // create the address we will connect to
    struct sockaddr_un addr;
    memset(&addr, 0, sizeof(addr));
    addr.sun_family = AF_UNIX;
    strcpy(addr.sun_path, path);

    // try to connect
    int err = connect(fd, (struct sockaddr*)&addr, sizeof(addr));
    if (err < 0)
    {
        ::close(fd);
        errToEx(path);
    }

    setName(path);
    setFD(fd);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void
LocalSocket::errToEx(const Object* object)
{
    utl::errToEx(object);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

UTL_NS_END;

////////////////////////////////////////////////////////////////////////////////////////////////////

#endif
