#pragma once

////////////////////////////////////////////////////////////////////////////////////////////////////

#include <libutl/BufferedStream.h>
#include <libutl/MemStream.h>
#include <libutl/NetServer.h>
#include <libutl/StringVars.h>

////////////////////////////////////////////////////////////////////////////////////////////////////

UTL_NS_BEGIN;

////////////////////////////////////////////////////////////////////////////////////////////////////

class FCGI_record;
class NetServerClient;

////////////////////////////////////////////////////////////////////////////////////////////////////
// FastCGIserver ///////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

/**
   Abstract base for a FastCGI server (responder).

   \author Adam McKee
   \ingroup communication
*/

////////////////////////////////////////////////////////////////////////////////////////////////////

class FastCGIserver : public NetServer
{
    UTL_CLASS_DECL_ABC(FastCGIserver, NetServer);
    UTL_CLASS_DEFID;

public:
    FastCGIserver(size_t maxClients, size_t maxPaused, size_t clientsPerThread = 1)
        : NetServer(maxClients, maxPaused, clientsPerThread)
    {
    }

protected:
    virtual void onClientConnect(NetServerClient* client);

private:
    virtual void clientReadMsg(NetServerClient* client);

    virtual void vrespond(NetServerClient* client, StringVars& params, MemStream& input) = 0;

    void respond(NetServerClient* client, uint16_t requestId, bool keepConn);

    void readParams(StringVars& params, MemStream& paramsData);
};

////////////////////////////////////////////////////////////////////////////////////////////////////
// FastCGIserver ///////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

class FastCGIstreamWriter : public BufferedStream
{
    UTL_CLASS_DECL(FastCGIstreamWriter, BufferedStream);

public:
    FastCGIstreamWriter(Stream* stream, bool streamOwner = true);

    void setRequestId(uint16_t requestId);

private:
    void init();
    void deInit();

    virtual void underflow();

    virtual void overflow();

private:
    FCGI_record* _rec;
};

////////////////////////////////////////////////////////////////////////////////////////////////////

UTL_NS_END;
