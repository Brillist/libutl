#include <libutl/libutl.h>
#include <libutl/Bool.h>

////////////////////////////////////////////////////////////////////////////////////////////////////

UTL_CLASS_IMPL(utl::Bool);

////////////////////////////////////////////////////////////////////////////////////////////////////

UTL_NS_BEGIN;

////////////////////////////////////////////////////////////////////////////////////////////////////

int
Bool::compare(const Object& rhs) const
{
    auto& b = utl::cast<Bool>(rhs);
    return utl::compare(_b, b._b);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void
Bool::copy(const Object& rhs)
{
    auto& b = utl::cast<Bool>(rhs);
    _b = b._b;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void
Bool::serialize(Stream& stream, uint_t io, uint_t mode)
{
    super::serialize(stream, io, mode);
    utl::serialize(_b, stream, io, mode);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

String
Bool::toString() const
{
    char* str = new char[8];
    if (_b)
    {
        strcpy(str, "true");
    }
    else
    {
        strcpy(str, "false");
    }
    return String(str, true, false);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void
Bool::set(const String& str)
{
    char fc = str[0];
    char lc = str.lastChar();
    if ((fc == '1') || (fc == 't') || (fc == 'y') || (lc == 'n'))
    {
        _b = 1;
    }
    else
    {
        _b = 0;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////

UTL_NS_END;
